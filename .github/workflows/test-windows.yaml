# modified from https://github.com/simonmichael/hledger/blob/master/.github/workflows/windows.yml

name: CI (Windows)

on:
  push:
    branches: [master, ci-*]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches: [master]

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: windows-latest
    steps:

    - name: üì• Checkout repository
      uses: actions/checkout@v4

    - name: üèó Install yq
      uses: frenck/action-setup-yq@v1

    - name: üîç Determine stack root and resolver and GHC
      ## 2023-11-21 https://github.com/commercialhaskell/stack/issues/6340
      ## Asking stack for the stack root unfortunately does not work
      ## if stack is not fully operational (meaning e.g. that GHC is installed)
      ## so we hardcode its location instead.
      run: |
        STACK_ROOT="C:/Users/runneradmin/AppData/Local/Programs/stack/x86_64-windows"
        STACK_RESOLVER=$(yq .resolver stack.yaml)
        GHC_VERSION=$(yq .compiler stack.yaml)
        echo STACK_ROOT="${STACK_ROOT}"         >> "${GITHUB_ENV}"
        echo STACK_RESOLVER="${STACK_RESOLVER}" >> "${GITHUB_ENV}"
        echo GHC_VERSION="${GHC_VERSION}" >> "${GITHUB_ENV}"
      # run: |
      #   STACK_ROOT="$(stack --system-ghc --no-install-ghc path --stack-root || echo "C:/Users/runneradmin/AppData/Local/Programs/stack/x86_64-windows")"
      #   echo "STACK_ROOT = ${STACK_ROOT}"
      #   echo STACK_ROOT="${STACK_ROOT}" >> "${GITHUB_ENV}"
      # What about C:/Users/runneradmin/AppData/Roaming/stack ?

    # things to be restored:
    # Include STACK_RESOLVER in cache key, otherwise caches accumulate build products for different resolvers.

    - name: üíæ Restore cached stack global package db
      id:   stack-global
      uses: actions/cache/restore@v3
      with:
        path: ${{ env.STACK_ROOT }}
        key: ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-global-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-global

    - name: üíæ Restore cached .stack-work
      id:   stack-work
      uses: actions/cache/restore@v3
      with:
        path: .stack-work
        key: ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-work-${{ hashFiles('**.yaml') }}
        restore-keys: |
             ${{ runner.os }}-stack-resolver-${{ env.STACK_RESOLVER }}-work

    # actions

    # - name: ‚è¨ Install stack
    #   ## Stack is preinstalled on GHA runners.
    #   #
    #   #if: steps.stack-programs-dir.outputs.cache-hit != 'true'
    #   # this step is needed to get stack.exe into PATH, for now
    #     # curl -sL https://get.haskellstack.org/stable/windows-x86_64.zip -o stack.zip
    #     # 7z x stack.zip stack.exe
    #   run: |
    #     which stack
    #     stack --version

    # - name: ‚è¨ Install GHC
    #   # if: steps.stack-programs-dir.outputs.cache-hit != 'true'
    #   # set PATH=C:\Users\runneradmin\AppData\Local\Programs\stack\local\bin;%PATH%
    #   run: |
    #     stack --no-terminal setup --install-ghc

    - name: Install the icu library
      run: |
        stack exec -- pacman -S --noconfirm mingw-w64-x86_64-icu mingw-w64-x86_64-pkgconf

    - name: üì∏ Build Snapshot
      run: |
        stack build --no-terminal --only-snapshot -j1

    - name: üß∞ Build Dependencies
      run: |
        stack build --no-terminal --only-dependencies

    - name: üî® Build and run tests
      run: |
        stack test

    # things to be cached

    - name: üíæ Cache stack global package db
      if:   always() && steps.stack-global.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: ${{ env.STACK_ROOT }}
        key: ${{ steps.stack-global.outputs.cache-primary-key }}

    - name: üíæ Cache .stack-work
      if:   always() && steps.stack-work.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: .stack-work
        key: ${{ steps.stack-work.outputs.cache-primary-key }}

    # release (optional)
    # artifacts:

    - name: üì¶ Compress executable and data files
      shell: pwsh
      run: |
        # locate the data-dir
        $snapshot = (stack path --snapshot-install-root)
        $datadir = (ls $snapshot\share *Agda-* -Recurse -Directory).FullName

        # locate the executable
        $local = (stack path --local-install-root)
        $executable = (ls $local\bin *als.exe* -Recurse -File).FullName

        # make a temporary directory for compresssing
        mkdir zip
        cp -r $datadir zip/data
        cp $executable zip/

        # include text-icu DLLs
        $mingw64bin = (stack path --extra-library-dirs).split(", ") -match "\\bin"
        ls $mingw64bin
        cp (ls $mingw64bin *libicudt*) zip/
        cp (ls $mingw64bin *libicuin*) zip/
        cp (ls $mingw64bin *libicuuc*) zip/
        ls zip

        # compress
        cd zip
        Compress-Archive * als-windows.zip
        cd ..
        mv zip/als-windows.zip .

    - name: üö¢ Release Artifacts
      if: startsWith(github.ref, 'refs/tags/v') # so that only commits with a git tag would upload artifacts
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release upload ${{ github.ref_name }} als-windows.zip --clobber
